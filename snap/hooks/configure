#!/bin/bash

if [ ! -f $SNAP_DATA/mysql/my.cnf ]; then
	cp $SNAP/my.cnf $SNAP_DATA/mysql/my.cnf
fi
DEFAULT_HTTP_PORT="80"
DEFAULT_HTTPS_PORT="443"
DEFAULT_DB_PORT="3306"
DEFAULT_JWT_ENABLED="false"
DEFAULT_JWT_SECRET="secret"
DEFAULT_JWT_HEADER="Authorization"
DEFAULT_EXAMPLE_ENABLED="false"
DEFAULT_USE_UNAUTHORIZED_STORAGE="false"
DEFAULT_LOOPBACK="false"

SERVICES_TO_RESTART=()


add_service_to_restart()
{
	for i in ${SERVICES_TO_RESTART[@]}; do
		if [ "$1" = "$i" ]; then
			return 0
		fi
	done

	SERVICES_TO_RESTART+=("$1")
}

nginx_onlyoffice_http_port()
{
	onlyoffice_http_port="$(onlyoffice_http_port)"
	previous_onlyoffice_http_port="$(previous_onlyoffice_http_port)"

	onlyoffice_https_port="$(onlyoffice_https_port)"
	previous_onlyoffice_https_port="$(previous_onlyoffice_https_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_http_port" = "$previous_onlyoffice_http_port" && "$onlyoffice_https_port" = "$previous_onlyoffice_https_port" ]; then
		return 0
	fi

	set_onlyoffice_http_port "$onlyoffice_http_port"
	set_previous_onlyoffice_http_port $onlyoffice_http_port

	set_onlyoffice_https_port "$onlyoffice_https_port"
	set_previous_onlyoffice_https_port $onlyoffice_https_port

	add_service_to_restart "nginx"
}

set_onlyoffice_http_port()
{
	snapctl set onlyoffice.ds-port="$1"
}

onlyoffice_http_port()
{
	port="$(snapctl get onlyoffice.ds-port)"
	if [ -z "$port" ]; then
		port="$DEFAULT_HTTP_PORT"
		set_onlyoffice_http_port $port
		set_previous_onlyoffice_http_port $port
	fi

	echo "$port"
}

previous_onlyoffice_http_port()
{
	snapctl get private.onlyoffice.ds-port
}

set_previous_onlyoffice_http_port()
{
	snapctl set private.onlyoffice.ds-port="$1"
}

set_onlyoffice_https_port()
{
	snapctl set onlyoffice.ds-ssl-port="$1"
}

onlyoffice_https_port()
{
	sport="$(snapctl get onlyoffice.ds-ssl-port)"
	if [ -z "$sport" ]; then
		sport="$DEFAULT_HTTPS_PORT"
		set_onlyoffice_https_port $sport
		set_previous_onlyoffice_https_port $sport
	fi

	echo "$sport"
}

previous_onlyoffice_https_port()
{
	snapctl get private.onlyoffice.ds-ssl-port
}

set_previous_onlyoffice_https_port()
{
	snapctl set private.onlyoffice.ds-ssl-port="$1"
}


db_onlyoffice_db_port()
{
	onlyoffice_db_port="$(onlyoffice_db_port)"
	previous_onlyoffice_db_port="$(previous_onlyoffice_db_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_db_port" = "$previous_onlyoffice_db_port" ]; then
		return 0
	fi
	set_onlyoffice_db_port "$onlyoffice_db_port"
	set_previous_onlyoffice_db_port $onlyoffice_db_port
	sed -i "/dbPort/s/"${previous_onlyoffice_db_port}"/"${onlyoffice_db_port}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	sed -i "s/port=.*/port="${onlyoffice_db_port}"/g" $SNAP_DATA/mysql/my.cnf

	add_service_to_restart "mysql"
}

set_onlyoffice_db_port()
{
	snapctl set onlyoffice.db-port="$1"
}

onlyoffice_db_port()
{
	port="$(snapctl get onlyoffice.db-port)"
	if [ -z "$port" ]; then
		port="$DEFAULT_DB_PORT"
		set_onlyoffice_db_port $port
		set_previous_onlyoffice_db_port $port
	fi

	echo "$port"
}

previous_onlyoffice_db_port()
{
	snapctl get private.onlyoffice.db-port
}

set_previous_onlyoffice_db_port()
{
	snapctl set private.onlyoffice.db-port="$1"
}




token_onlyoffice_jwt_enabled()
{
	onlyoffice_jwt_enabled="$(onlyoffice_jwt_enabled)"
	previous_onlyoffice_jwt_enabled="$(previous_onlyoffice_jwt_enabled)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_jwt_enabled" = "$previous_onlyoffice_jwt_enabled" ]; then
		return 0
	fi
	set_onlyoffice_jwt_enabled "$onlyoffice_jwt_enabled"
	set_previous_onlyoffice_jwt_enabled $onlyoffice_jwt_enabled
	update_jwt_enabled_settings

	add_service_to_restart "documentserver"
}

set_onlyoffice_jwt_enabled()
{
	snapctl set onlyoffice.jwt-enabled="$1"
}

onlyoffice_jwt_enabled()
{
	port="$(snapctl get onlyoffice.jwt-enabled)"
	if [ -z "$port" ]; then
		port="$DEFAULT_JWT_ENABLED"
		set_onlyoffice_jwt_enabled $port
		set_previous_onlyoffice_jwt_enabled $port
	fi

	echo "$port"
}

previous_onlyoffice_jwt_enabled()
{
	snapctl get private.onlyoffice.jwt-enabled
}

set_previous_onlyoffice_jwt_enabled()
{
	snapctl set private.onlyoffice.jwt-enabled="$1"
}

update_jwt_enabled_settings()
{
	sed -i "/browser/s/"${previous_onlyoffice_jwt_enabled}"/"${onlyoffice_jwt_enabled}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	sed -i "/inbox/s/"${previous_onlyoffice_jwt_enabled}"/"${onlyoffice_jwt_enabled}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	sed -i "/outbox/s/"${previous_onlyoffice_jwt_enabled}"/"${onlyoffice_jwt_enabled}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
}




token_onlyoffice_jwt_secret()
{
	onlyoffice_jwt_secret="$(onlyoffice_jwt_secret)"
	previous_onlyoffice_jwt_secret="$(previous_onlyoffice_jwt_secret)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_jwt_secret" = "$previous_onlyoffice_jwt_secret" ]; then
		return 0
	fi
	set_onlyoffice_jwt_secret "$onlyoffice_jwt_secret"
	set_previous_onlyoffice_jwt_secret $onlyoffice_jwt_secret
	sed -i "/inbox/s/"${previous_onlyoffice_jwt_secret}"/"${onlyoffice_jwt_secret}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	sed -i "/outbox/s/"${previous_onlyoffice_jwt_secret}"/"${onlyoffice_jwt_secret}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	sed -i "/session/s/"${previous_onlyoffice_jwt_secret}"/"${onlyoffice_jwt_secret}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json

	add_service_to_restart "documentserver"
}

set_onlyoffice_jwt_secret()
{
	snapctl set onlyoffice.jwt-secret="$1"
}

onlyoffice_jwt_secret()
{
	port="$(snapctl get onlyoffice.jwt-secret)"
	if [ -z "$port" ]; then
		port="$DEFAULT_JWT_SECRET"
		set_onlyoffice_jwt_secret $port
		set_previous_onlyoffice_jwt_secret $port
	fi

	echo "$port"
}

previous_onlyoffice_jwt_secret()
{
	snapctl get private.onlyoffice.jwt-secret
}

set_previous_onlyoffice_jwt_secret()
{
	snapctl set private.onlyoffice.jwt-secret="$1"
}




token_onlyoffice_jwt_header()
{
	onlyoffice_jwt_header="$(onlyoffice_jwt_header)"
	previous_onlyoffice_jwt_header="$(previous_onlyoffice_jwt_header)"
	set_onlyoffice_jwt_header "$onlyoffice_jwt_header"
	set_previous_onlyoffice_jwt_header $onlyoffice_jwt_header
	sed -i "/header/s/"${previous_onlyoffice_jwt_header}"/"${onlyoffice_jwt_header}"/g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json

	add_service_to_restart "documentserver"
}

set_onlyoffice_jwt_header()
{
	snapctl set onlyoffice.jwt-header="$1"
}

onlyoffice_jwt_header()
{
	port="$(snapctl get onlyoffice.jwt-header)"
	if [ -z "$port" ]; then
		port="$DEFAULT_JWT_HEADER"
		set_onlyoffice_jwt_header $port
		set_previous_onlyoffice_jwt_header $port
	fi

	echo "$port"
}

previous_onlyoffice_jwt_header()
{
	snapctl get private.onlyoffice.jwt-header
}

set_previous_onlyoffice_jwt_header()
{
	snapctl set private.onlyoffice.jwt-header="$1"
}

onlyoffice_example_enabled()
{
	onlyoffice_example_enabled="$(onlyoffice_example_enabled)"
	previous_onlyoffice_example_enabled="$(previous_onlyoffice_example_enabled)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_example_enabled" = "$previous_onlyoffice_example_enabled" ]; then
		return 0
	fi
	set_onlyoffice_example_enabled "$onlyoffice_example_enabled"
	set_previous_onlyoffice_example_enabled $onlyoffice_example_enabled
}

set_onlyoffice_example_enabled()
{
	snapctl set onlyoffice.example-enabled="$1"
}

onlyoffice_example_enabled()
{
	port="$(snapctl get onlyoffice.example-enabled)"
	if [ -z "$port" ]; then
		port="$DEFAULT_EXAMPLE_ENABLED"
		set_onlyoffice_example_enabled $port
		set_previous_onlyoffice_example_enabled $port
	fi

	echo "$port"
}

previous_onlyoffice_example_enabled()
{
	snapctl get private.onlyoffice.example-enabled
}

set_previous_onlyoffice_example_enabled()
{
	snapctl set private.onlyoffice.example-enabled="$1"
}

onlyoffice_use_unautorized_storage()
{
	onlyoffice_use_unautorized_storage="$(onlyoffice_use_unautorized_storage)"
	previous_onlyoffice_use_unautorized_storage="$(previous_onlyoffice_use_unautorized_storage)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_use_unautorized_storage" = "$previous_onlyoffice_use_unautorized_storage" ]; then
		return 0
	fi
	set_onlyoffice_use_unautorized_storage "$onlyoffice_use_unautorized_storage"
	set_previous_onlyoffice_use_unautorized_storage $onlyoffice_use_unautorized_storage
}

set_onlyoffice_use_unautorized_storage()
{
	snapctl set onlyoffice.use-unautorized-storage="$1"
}

onlyoffice_use_unautorized_storage()
{
	port="$(snapctl get onlyoffice.use-unautorized-storage)"
	if [ -z "$port" ]; then
		port="$DEFAULT_USE_UNAUTHORIZED_STORAGE"
		set_onlyoffice_use_unautorized_storage $port
		set_previous_onlyoffice_use_unautorized_storage $port
	fi

	echo "$port"
}

previous_onlyoffice_use_unautorized_storage()
{
	snapctl get private.onlyoffice.use-unautorized-storage
}

set_previous_onlyoffice_use_unautorized_storage()
{
	snapctl set private.onlyoffice.use-unautorized-storage="$1"
}

token_onlyoffice_loopback()
{
	onlyoffice_loopback="$(onlyoffice_loopback)"
	previous_onlyoffice_loopback="$(previous_loopback)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$onlyoffice_loopback" = "$previous_onlyoffice_loopback" ]; then
		return 0
	fi
	set_onlyoffice_loopback "$onlyoffice_loopback"
	set_previous_onlyoffice_loopback "$onlyoffice_loopback"

	add_service_to_restart "nginx"
}

set_onlyoffice_loopback()
{
	snapctl set onlyoffice.loopback="$1"
}

onlyoffice_loopback()
{
	param="$(snapctl get onlyoffice.loopback)"
	if [ -z "$param" ]; then
		param="$DEFAULT_LOOPBACK"
		set_onlyoffice_loopback $param
		set_previous_onlyoffice_loopback $param
	fi

	echo "$param"
}

previous_onlyoffice_loopback()
{
	snapctl get private.onlyoffice.loopback
}

set_previous_onlyoffice_loopback()
{
	snapctl set private.onlyoffice.loopback="$1"
}



nginx_onlyoffice_http_port && \
db_onlyoffice_db_port && \
token_onlyoffice_jwt_enabled && \
token_onlyoffice_jwt_secret && \
token_onlyoffice_jwt_header && \
onlyoffice_example_enabled && \
onlyoffice_use_unautorized_storage && \
token_onlyoffice_loopback


#restart necessary services
for i in ${SERVICES_TO_RESTART[@]}; do
	snapctl restart onlyoffice-ds.$i
done