#!/bin/sh

# shellcheck source=src/mysql/utilities/mysql-utilities
. "$SNAP/utilities/mysql-utilities"
. "$SNAP/snap/hooks/configure"

root_option_file="$SNAP_DATA/mysql/root.ini"
new_install=false

# Make sure the database is initialized (this is safe to run if already
# initialized)
if mysqld --initialize-insecure --basedir="$SNAP" --datadir="$SNAP_DATA/mysql" --lc-messages-dir="$SNAP/share"; then
	new_install=true
fi

set_mysql_setup_running

# Start mysql
"$SNAP/support-files/mysql.server" start

# Initialize new installation if necessary.
if [ $new_install = true ]; then
	# Generate a password for the root mysql user.
	printf "Generating root mysql password... "
	root_password="$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c64)"
	printf "done\n"

	# Generate a password for the onlyoffice mysql user.
	printf "Generating onlyoffice mysql password... "
	onlyoffice_password="$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c64)"
	# Save onlyoffice user password
	sed -i -e "s#dbPass\": \"onlyoffice#dbPass\": \"${onlyoffice_password}#g" $SNAP_DATA/etc/onlyoffice/documentserver/local.json
	printf "done\n"

	# Save root user information
	cat <<-EOF > "$root_option_file"
		[client]
		port=${onlyoffice_db_port}
		user=root
	EOF
	chmod 600 "$root_option_file"

	# Now set everything up in one step:
	# 1) Set the root user's password
	# 2) Create the onlyoffice user
	# 3) Create the onlyoffice database
	# 4) Grant the onlyoffice user privileges on the onlyoffice database
	printf "Setting up users and onlyoffice database... "
	if mysql --defaults-file="$root_option_file" <<-SQL
		ALTER USER 'root'@'localhost' IDENTIFIED BY '$root_password';
		CREATE USER 'onlyoffice'@'localhost' IDENTIFIED BY '$onlyoffice_password';
		CREATE DATABASE onlyoffice;
		GRANT ALL PRIVILEGES ON onlyoffice.* TO 'onlyoffice'@'localhost' IDENTIFIED BY '$onlyoffice_password';
		USE onlyoffice;
		SOURCE /snap/onlyoffice-ds/current/var/www/onlyoffice/documentserver/server/schema/mysql/createdb.sql;
		SQL
	then
		# Now the root mysql user has a password. Save that as well.
		echo "password=$root_password" >> "$root_option_file"
		printf "done\n"
	else
		echo "Failed to initialize-- reverting..."
		"$SNAP/support-files/mysql.server" stop
		rm -rf "$SNAP_DATA"/mysql/*
	fi
fi

# Wait here until mysql is running
wait_for_mysql -f

# Check and upgrade mysql tables if necessary. This will return 0 if the upgrade
# succeeded, in which case we need to restart mysql.
echo "Checking/upgrading mysql tables if necessary..."
if mysql_upgrade --defaults-file="$root_option_file"; then
	echo "Restarting mysql server after upgrade..."
	"$SNAP/support-files/mysql.server" restart

	# Wait for server to come back after upgrade
	wait_for_mysql -f
fi

# If this was a new installation, wait until the server is all up and running
# before saving off the onlyoffice user's password. This way the presence of the
# file can be used as a signal that mysql is ready to be used.
if [ $new_install = true ]; then
	mysql_set_onlyoffice_password "$onlyoffice_password"
fi

set_mysql_setup_not_running

# Wait here until mysql exits (turn a forking service into simple). This is
# only needed for Ubuntu Core 15.04, as 16.04 supports forking services.
pid=$(mysql_pid)
while kill -0 "$pid" 2>/dev/null; do
	sleep 1
done
